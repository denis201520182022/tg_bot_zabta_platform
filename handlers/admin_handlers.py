# handlers/admin_handlers.py

import logging
from aiogram import Router, types, F, Bot
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import html
from datetime import datetime

from config import ADMIN_IDS
from database.requests import (get_all_users, get_user_by_phone,
                               add_user_config, get_active_template, set_new_template)
from bot_commands import set_user_commands
from g_sheets import export_to_google_sheet

# –°–æ–∑–¥–∞–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def escape_md_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return "".join(f'\\{char}' if char in escape_chars else char for char in text)

# --- –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class IsAdmin(Filter):
    async def __call__(self, message: types.Message) -> bool:
        return message.from_user.id in ADMIN_IDS

# --- –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class AssignData(StatesGroup):
    waiting_for_phone = State()
    waiting_for_bot_id = State()
    waiting_for_api_key = State()
    waiting_for_trunk_id = State()

class EditTemplate(StatesGroup):
    waiting_for_template = State()

# --- –†–æ—É—Ç–µ—Ä –∏ –µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
router = Router()
router.message.filter(IsAdmin())

# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –ê–î–ú–ò–ù-–ú–ï–ù–Æ ---
def admin_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    builder.button(text="üìé –ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    builder.button(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω")
    builder.button(text="üì¢ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
    builder.button(text="üìà –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets") # <--- –î–û–ë–ê–í–¨–¢–ï –ö–ù–û–ü–ö–£
    builder.adjust(2, 2, 2) # –ù–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    return builder.as_markup(resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@router.message(Command("admin"))
async def cmd_admin(message: types.Message, bot: Bot):
    admin_id = message.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –≤–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
    await set_user_commands(bot, admin_id)
    await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_keyboard())

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã
@router.message(Command("cancel"))
@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: types.Message, state: FSMContext):
    admin_id = message.from_user.id
    current_state = await state.get_state()
    if current_state is None:
        logger.debug(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–µ –Ω–∞—Ö–æ–¥—è—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=admin_keyboard())
        return
    
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}.")
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ /list_users
@router.message(Command("list_users"))
@router.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def cmd_list_users(message: types.Message):
    admin_id = message.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    users = await get_all_users()
    if not users:
        await message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    user_list_parts = ["<b>–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"]
    for user in users:
        line = f"üìû <code>{user.phone_number}</code> (ID: <code>{user.telegram_id}</code>)\n"
        user_list_parts.append(line)
    await message.answer("".join(user_list_parts), parse_mode="HTML")

# --- –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ---
@router.message(Command("test_broadcast"))
@router.message(F.text == "üì¢ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
async def cmd_test_broadcast(message: types.Message, bot: Bot):
    admin_id = message.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É.")

    template = await get_active_template()

    if not template:
        logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –ø—ã—Ç–∞–ª—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.")
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω'.")
        return

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    test_data = {
        "datetime": datetime.now().strftime('%d.%m.%Y %H:%M'),
        "audioLink": "https://example.com/test_record.mp3",
        "transcription": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–≤–æ–Ω–∫–∞. –ö–ª–∏–µ–Ω—Ç –≤—ã—Ä–∞–∑–∏–ª –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å.",
        "var_is_actual": "–¢–µ—Å—Ç",
        "var_result": "–†–µ–∑—É–ª—å—Ç–∞—Ç: –¢–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω."
    }

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
        message_text = template.template_text.format(**test_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É)
        await bot.send_message(
            chat_id=admin_id,
            text=message_text,
            parse_mode="HTML"
        )
        
        await message.answer("‚úÖ –í —Ç–∞–∫–æ–º –≤–∏–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω–∏—è.")
        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}.")

    except KeyError as e:
        # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤ —à–∞–±–ª–æ–Ω–µ –¥–æ–ø—É—Å—Ç–∏–ª –æ–ø–µ—á–∞—Ç–∫—É –≤ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —à–∞–±–ª–æ–Ω–µ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}. –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —à–∞–±–ª–æ–Ω–µ!</b>\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: <code>{e}</code>.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="HTML")

# –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (/assign)
@router.message(Command("assign"))
@router.message(F.text == "üìé –ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def cmd_assign(message: types.Message, state: FSMContext):
    admin_id = message.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...).\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AssignData.waiting_for_phone)

@router.message(AssignData.waiting_for_phone)
async def process_assign_phone(message: types.Message, state: FSMContext):
    admin_id = message.from_user.id
    phone = message.text
    user = await get_user_by_phone(phone)
    if not user:
        logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –≤–≤–µ–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä '{phone}' –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –≤–≤–µ–ª –Ω–æ–º–µ—Ä {phone} –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—à–∞–≥ 1/4).")
    await state.update_data(phone=phone)
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ `bot_id`:")
    await state.set_state(AssignData.waiting_for_bot_id)

@router.message(AssignData.waiting_for_bot_id)
async def process_assign_bot_id(message: types.Message, state: FSMContext):
    admin_id = message.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –≤–≤–µ–ª bot_id (—à–∞–≥ 2/4).")
    await state.update_data(bot_id=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ `api_key`:")
    await state.set_state(AssignData.waiting_for_api_key)

@router.message(AssignData.waiting_for_api_key)
async def process_assign_api_key(message: types.Message, state: FSMContext):
    admin_id = message.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –≤–≤–µ–ª api_key (—à–∞–≥ 3/4).")
    await state.update_data(api_key=message.text)
    await message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –≤–≤–µ–¥–∏—Ç–µ `trunk_id`:")
    await state.set_state(AssignData.waiting_for_trunk_id)

@router.message(AssignData.waiting_for_trunk_id)
async def process_assign_trunk_id(message: types.Message, state: FSMContext):
    admin_id = message.from_user.id
    await state.update_data(trunk_id=message.text)
    data = await state.get_data()
    
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é "
                f"bot_id={data['bot_id']}, trunk_id={data['trunk_id']} "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–æ–º–µ—Ä–æ–º {data['phone']}.")

    await add_user_config(
        phone=data['phone'],
        bot_id=data['bot_id'],
        api_key=data['api_key'],
        trunk_id=data['trunk_id']
    )
    await message.answer(
        f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {data['phone']}.",
        reply_markup=admin_keyboard()
    )
    await state.clear()

# --- –ü—Ä–æ—Ü–µ—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ ---

DEFAULT_TEMPLATE = """–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞: {datetime}
–ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {audioLink}
–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: {var_is_actual}
–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞: {var_result}
–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è: {transcription}"""

@router.message(Command("get_template"))
@router.message(F.text == "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω")
async def cmd_get_template(message: types.Message):
    admin_id = message.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω.")
    template = await get_active_template()
    if template:
        text = f"<b>–¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω:</b>\n\n<pre>{html.escape(template.template_text)}</pre>"
        await message.answer(text, parse_mode="HTML")
    else:
        logger.info("–ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        await set_new_template(DEFAULT_TEMPLATE, message.from_user.id)
        text = f"–®–∞–±–ª–æ–Ω –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n\n<pre>{html.escape(DEFAULT_TEMPLATE)}</pre>"
        await message.answer(text, parse_mode="HTML")

@router.message(Command("edit_template"))
@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω")
async def cmd_edit_template(message: types.Message, state: FSMContext):
    admin_id = message.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.")
    text = (
        "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞.</b>\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
        "<code>{datetime}</code>, <code>{audioLink}</code>, <code>{transcription}</code>, "
        "<code>{var_is_actual}</code>, <code>{var_result}</code>\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.</i>"
    )
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(EditTemplate.waiting_for_template)

@router.message(EditTemplate.waiting_for_template)
async def process_edit_template(message: types.Message, state: FSMContext):
    admin_id = message.from_user.id
    logger.debug(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω: {message.text}")
    await set_new_template(message.text, admin_id)
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª —à–∞–±–ª–æ–Ω.")
    await message.answer("–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=admin_keyboard())
    await state.clear()



# --- –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –≠–ö–°–ü–û–†–¢–ê ---
@router.message(Command("export_gsheet"))
@router.message(F.text == "üìà –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets")
async def cmd_export_gsheet(message: types.Message):
    admin_id = message.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —ç–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets.")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    processing_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

    success, result = await export_to_google_sheet()

    if success:
        if result.startswith('http'):
            await processing_message.edit_text(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {result}", disable_web_page_preview=True)
        else: # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—ã–ª–æ
            await processing_message.edit_text(f"‚úÖ {result}")
    else:
        await processing_message.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ!</b>\n\n–ü—Ä–∏—á–∏–Ω–∞: <code>{result}</code>", parse_mode="HTML")